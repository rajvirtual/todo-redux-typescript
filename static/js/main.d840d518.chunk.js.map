{"version":3,"sources":["redux/actions.tsx","components/Filter.tsx","components/Input.tsx","components/ToDoItem.tsx","components/ToDoList.tsx","App.tsx","redux/reducer.tsx","redux/filterReducer.tsx","redux/rootReducer.tsx","index.tsx"],"names":["nextId","mapDispatchToProps","setFilter","filter","type","value","connect","className","onClick","addItem","id","onKeyDown","e","key","target","trim","length","placeholder","ToDoItem","text","complete","onToggleClick","radio","useRef","ref","current","checked","handleToggleClick","style","textDecoration","toggleTodo","getVisibleTodos","todos","c","completed","state","todoItems","visibilityFilter","map","App","onSubmit","preventDefault","initialState","action","todo","combineReducers","store","createStore","rootReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d840d518.chunk.js","sourcesContent":["import { TodoActionTypes } from \"./types\";\r\n\r\nexport const ADD_ITEM = \"ADD_ITEM\";\r\nexport const TOGGLE_TODO = \"MARK_COMPLETE\";\r\nexport const FILTER_ALL = \"FILTER_ALL\";\r\nexport const FILTER_ACTIVE = \"FILTER_ACTIVE\";\r\nexport const FILTER_COMPLETE = \"FILTER_COMPLETE\";\r\nexport const SET_FILTER = \"SET_FILTER\";\r\nlet nextId: number = 0;\r\n\r\nexport const addItem = (value: string): TodoActionTypes => ({\r\n  type: ADD_ITEM,\r\n  nextId: nextId++,\r\n  value,\r\n});\r\n\r\nexport const toggleTodo = (id: number): TodoActionTypes => ({\r\n  type: TOGGLE_TODO,\r\n  id,\r\n});\r\n\r\nexport const setFilter = (filter: string): TodoActionTypes => ({\r\n  type: SET_FILTER,\r\n  value: filter,\r\n});\r\n","import React from \"react\";\r\nimport {\r\n  FILTER_ACTIVE,\r\n  FILTER_ALL,\r\n  FILTER_COMPLETE,\r\n  setFilter,\r\n} from \"./../redux/actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { TodoActionTypes } from \"../redux/types\";\r\nconst mapDispatchToProps = {\r\n  setFilter,\r\n};\r\nconst Filter = ({\r\n  setFilter,\r\n}: {\r\n  setFilter: (filter: string) => TodoActionTypes;\r\n}) => {\r\n  return (\r\n    <>\r\n      <div className=\"p-2\">\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => setFilter(FILTER_ALL)}\r\n          className=\"bg-blue-500 px-2 active:bg-blue-700 text-white\"\r\n        >\r\n          All\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => setFilter(FILTER_ACTIVE)}\r\n          className=\"bg-blue-500 px-2 ml-2 active:bg-blue-700 text-white\"\r\n        >\r\n          Active\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => setFilter(FILTER_COMPLETE)}\r\n          className=\"bg-blue-500 px-2 ml-2 active:bg-blue-700 text-white\"\r\n        >\r\n          Completed\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Filter);\r\n","import React from \"react\";\r\nimport { addItem } from \"../redux/actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { TodoActionTypes } from \"../redux/types\";\r\nconst mapDispatchToProps = {\r\n  addItem,\r\n};\r\nconst Input = ({ addItem }: { addItem: (item: string) => TodoActionTypes }) => {\r\n  const handleKeyDown = (\r\n    e: React.KeyboardEvent<HTMLInputElement> & { target: HTMLInputElement }\r\n  ) => {\r\n    if (e.key === \"Enter\") {\r\n      if (e.target.value && e.target.value.trim().length > 0) {\r\n        addItem(e.target.value);\r\n      }\r\n      e.target.value = \"\";\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <input\r\n        className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\r\n        id=\"todoText\"\r\n        type=\"text\"\r\n        onKeyDown={handleKeyDown}\r\n        placeholder=\"Add an item and press Enter\"\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Input);\r\n","import React, { useRef } from \"react\";\r\nexport const ToDoItem = ({\r\n  id,\r\n  text,\r\n  complete,\r\n  onToggleClick,\r\n}: {\r\n  id: number;\r\n  text: string;\r\n  complete: boolean;\r\n  onToggleClick: (id: number) => void;\r\n}) => {\r\n  let radio = useRef<HTMLInputElement>(null);\r\n  const handleToggleClick = (id: number) => {\r\n    if (radio && radio.current) {\r\n      radio.current.checked = false;\r\n      onToggleClick(id);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <div>\r\n        <input\r\n          ref={radio}\r\n          type=\"radio\"\r\n          onClick={() => handleToggleClick(id)}\r\n        ></input>\r\n        <span\r\n          className=\"ml-2\"\r\n          style={{ textDecoration: complete ? \"line-through\" : \"none\" }}\r\n        >\r\n          {text}\r\n        </span>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { ToDoItem } from \"./ToDoItem\";\r\nimport {\r\n  FILTER_ALL,\r\n  FILTER_ACTIVE,\r\n  FILTER_COMPLETE,\r\n  toggleTodo,\r\n} from \"../redux/actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { TodoModel, RootState } from \"../redux/types\";\r\nconst mapStateToProps = (state: RootState) => {\r\n  return {\r\n    todoItems: getVisibleTodos(state.todoItems, state.visibilityFilter),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  toggleTodo,\r\n};\r\n\r\nconst getVisibleTodos = (todos: TodoModel[], filter: string): TodoModel[] => {\r\n  switch (filter) {\r\n    case FILTER_ALL: {\r\n      return todos;\r\n    }\r\n    case FILTER_ACTIVE: {\r\n      return todos.filter((c: TodoModel) => !c.completed);\r\n    }\r\n    case FILTER_COMPLETE: {\r\n      return todos.filter((c: TodoModel) => c.completed);\r\n    }\r\n    default:\r\n      return todos;\r\n  }\r\n};\r\n\r\nconst ToDoList = ({\r\n  todoItems,\r\n  toggleTodo,\r\n}: {\r\n  todoItems: TodoModel[];\r\n  toggleTodo: (id: number) => void;\r\n}) => {\r\n  return (\r\n    <>\r\n      {todoItems.map((c: TodoModel) => (\r\n        <ToDoItem\r\n          onToggleClick={toggleTodo}\r\n          key={c.id}\r\n          id={c.id}\r\n          complete={c.completed}\r\n          text={c.text}\r\n        ></ToDoItem>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ToDoList);\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Filter from \"./components/Filter\";\nimport Input from \"./components/Input\";\nimport ToDoList from \"./components/ToDoList\";\n\nfunction App() {\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n  };\n  return (\n    <>\n      <div className=\"w-full max-w-xs m-auto mt-20\">\n        <div className=\"mb-4\">\n          <form\n            onSubmit={handleSubmit}\n            className=\"bg-white shadow-md rounded px-8 pt-6 pb-4 mb-4\"\n          >\n            <Input></Input>\n            <Filter></Filter>\n          </form>\n        </div>\n        <ToDoList></ToDoList>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import { ADD_ITEM, TOGGLE_TODO } from \"./actions\";\r\nimport { TodoActionTypes, TodoModel } from \"./types\";\r\n\r\nconst initialState: TodoModel[] = [];\r\n\r\nconst todoItems = (\r\n  state: TodoModel[] = initialState,\r\n  action: TodoActionTypes\r\n): TodoModel[] => {\r\n  switch (action.type) {\r\n    case ADD_ITEM:\r\n      return [\r\n        ...state,\r\n        { id: action.nextId, text: action.value, completed: false },\r\n      ];\r\n    case TOGGLE_TODO:\r\n      return state.map((todo: TodoModel) =>\r\n        todo.id === action.id ? { ...todo, completed: !todo.completed } : todo\r\n      );\r\n  }\r\n  return state;\r\n};\r\nexport default todoItems;\r\n","import { FILTER_ALL, SET_FILTER } from \"./actions\";\r\nimport { TodoActionTypes } from \"./types\";\r\n\r\nconst visibilityFilter = (\r\n  state: string = FILTER_ALL,\r\n  action: TodoActionTypes\r\n): string => {\r\n  switch (action.type) {\r\n    case SET_FILTER: {\r\n      return action.value;\r\n    }\r\n  }\r\n  return state;\r\n};\r\nexport default visibilityFilter;\r\n","import { combineReducers } from \"redux\";\r\nimport todoItems from \"./reducer\";\r\nimport visibilityFilter from \"./filterReducer\";\r\n\r\nexport default combineReducers({\r\n  todoItems,\r\n  visibilityFilter,\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport rootReducer from \"./redux/rootReducer\";\nimport \"./tailwind.output.css\";\n\nconst store = createStore(rootReducer);\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}